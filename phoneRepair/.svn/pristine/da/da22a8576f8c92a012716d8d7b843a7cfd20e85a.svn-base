package com.etc.repair.dao;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.sf.json.util.CycleDetectionStrategy;

import com.etc.repair.util.BaseDao;
import com.etc.repair.vo.Orders;
import com.etc.repair.vo.Store;

public class StoreDao extends BaseDao{

	public boolean isExistStore(String susername) throws ClassNotFoundException, IllegalArgumentException, InvocationTargetException, IllegalAccessException, InstantiationException, SQLException, IOException {
		List<Store> list = query("select * from store where susername=?", new Object[]{susername}, Store.class);
		if(list.size()==0){
			//不存在
			return false;
		}
		return true;
	}

	public boolean regist(String susername, String spassword, String sname, String saddress, String spic, String stime,
			String sdesc) throws ClassNotFoundException, FileNotFoundException, SQLException, IOException {
		int count = Update("insert into store(susername,spassword,sname,saddress,spic,stime,sdesc) values(?,?,?,?,?,?,?)", susername,spassword,sname,saddress,spic,stime,sdesc);
		//System.out.println(count);
		return (count==1)?true:false;
	}

	public Store login(String susername, String spassword) throws ClassNotFoundException, IllegalArgumentException, InvocationTargetException, IllegalAccessException, InstantiationException, SQLException, IOException {
		List<Store> list = query("select * from store where susername=? and spassword=?", new Object[]{susername, spassword},Store.class);
		if(list.size()>0){
			return list.get(0);
		}
		
		return null;
	}

	/**
	 * 通过省市获取商家列表
	 * @param province
	 * @return
	 * @throws IOException 
	 * @throws SQLException 
	 * @throws InstantiationException 
	 * @throws IllegalAccessException 
	 * @throws InvocationTargetException 
	 * @throws IllegalArgumentException 
	 * @throws ClassNotFoundException 
	 */
	public List<Store> getStore(String searchAddress) throws ClassNotFoundException, IllegalArgumentException, InvocationTargetException, IllegalAccessException, InstantiationException, SQLException, IOException {
		pstmt = con.prepareStatement("select * from store where saddress like ?");	
		pstmt.setString(1, "%"+searchAddress+"%");
		rs = pstmt.executeQuery();
		List<Store> list = new ArrayList<Store>();
		while(rs.next()){
			Store store = new Store();
			store.setSid(rs.getInt("sid"));
			store.setSname(rs.getString("sname"));
			store.setSpic(rs.getString("spic"));
			store.setSdesc(rs.getString("sdesc"));
			store.setSmajor(rs.getString("smajor"));
			store.setSaddress(rs.getString("saddress"));
			list.add(store);
		}
		/*for(Store s:list){
			System.out.println(s);
		}*/
		return list;
	}

	public List<Store> show() throws ClassNotFoundException, IllegalArgumentException, InvocationTargetException, IllegalAccessException, InstantiationException, SQLException, IOException {
		pstmt = con.prepareStatement("select * from store limit 6");	
		rs = pstmt.executeQuery();
		List<Store> list = new ArrayList<Store>();
		while(rs.next()){
			Store store = new Store();
			store.setSid(rs.getInt("sid"));
			store.setSname(rs.getString("sname"));
			store.setSpic(rs.getString("spic"));
			store.setSdesc(rs.getString("sdesc"));
			store.setSmajor(rs.getString("smajor"));
			store.setSaddress(rs.getString("saddress"));
			list.add(store);
		}
		return list;
	}

	public List<Store> searchShow(String address, String search, int currPage, int pageSize) throws ClassNotFoundException, IllegalArgumentException, InvocationTargetException, IllegalAccessException, InstantiationException, SQLException, IOException {
		//System.out.println(currPage+ " "+ pageSize);
		//List<Store> list = query("select * from store where saddress like ? and sdesc like ? limit ?,?", new Object[]{"%"+city+"%","%"+search+"%",pageSize*(currPage-1),pageSize}, Store.class);
		//List<Store> list = query("select * from store limit ?,?", new Object[]{0,5}, Store.class);
		pstmt = con.prepareStatement("select * from store where saddress like ? and sdesc like ? limit ?,?");
		pstmt.setString(1, "%"+address+"%");
		pstmt.setString(2, "%"+search+"%");
		pstmt.setInt(3, pageSize*(currPage-1));
		pstmt.setInt(4, pageSize);
		rs = pstmt.executeQuery();
		List<Store> list = new ArrayList<Store>();
		while(rs.next()){
			Store s = new Store();
			s.setSname(rs.getString("sname"));
			s.setSaddress(rs.getString("saddress"));
			s.setSmajor(rs.getString("smajor"));
			s.setSpic(rs.getString("spic"));
			list.add(s);
		}
		return list;
	}


	public Store searchBySid(int sid) throws ClassNotFoundException, IllegalArgumentException, InvocationTargetException, IllegalAccessException, InstantiationException, SQLException, IOException {
		List<Store> list = query("select * from store where sid=?", new Object[]{sid}, Store.class);
		Store s = list.get(0);
		return s;
	}

	public int searchTotalCount(String address, String search) throws ClassNotFoundException, IllegalArgumentException, InvocationTargetException, IllegalAccessException, InstantiationException, SQLException, IOException {
		List<Store> list = query("select * from store where saddress like ? and sdesc like ?", new Object[]{"%"+address+"%","%"+search+"%"}, Store.class);
		//System.out.println(list.size());
		return list.size();
	}

	public List slistShow(String number, String time, int sid) throws ClassNotFoundException, IllegalArgumentException, InvocationTargetException, IllegalAccessException, InstantiationException, SQLException, IOException {
		List<Orders> list = query("select * from orders where sid=?", new Object[]{sid}, Orders.class);
		
		return list;
	}



}
